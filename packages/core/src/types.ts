/**
 * A way to represent the unique identifier of a Kubernetes resource.
 */
export class ResourceLocator {
  apiVersion: string;
  kind: string;
  namespace?: string;
  name: string;

  constructor(
    apiVersion: string,
    kind: string,
    name: string,
    namespace?: string,
  ) {
    this.apiVersion = apiVersion;
    this.kind = kind;
    this.name = name;
    this.namespace = namespace;
  }

  toString(): string {
    return `${this.apiVersion}/${this.kind}${this.namespace ? `/${this.namespace}` : ""}/${this.name}`;
  }

  equals(other: ResourceLocator): boolean {
    return (
      this.apiVersion === other.apiVersion &&
      this.kind === other.kind &&
      this.name === other.name &&
      this.namespace === other.namespace
    );
  }

  static of<T extends KubernetesObject>(resource: T): ResourceLocator {
    return new ResourceLocator(
      resource.apiVersion,
      resource.kind,
      resource.metadata.name,
      resource.metadata.namespace,
    );
  }
}

/**
 * The most abstract type of a Kubernetes object.
 */
export interface KubernetesObject {
  apiVersion: string;
  kind: string;
  metadata: ObjectMeta;
  // deno-lint-ignore no-explicit-any
  [key: string]: any;

  /**
   * An internal field used by Gin to track the origin of the resource, such as the file that it was loaded from,
   * where it was emitted from, and what other resource was used to generated it.
   */
  gin?: GinMeta;
}

export interface GinMeta {
  /**
   * If specified, this is the name of the file where the object was loaded from. The file may not be a file on
   * disk, it is supposed to only be a human-readable identifier that makes it easy to trace the origin of the object.
   * This field is not set automatically in most cases, and it will be empty if the object was specified in code.
   */
  loadedFrom?: string;

  /**
   * The location where the original object was loaded from, such as a Gin module or a resource adapter. This is set
   * automatically when the object is passed to {@link Gin#emit} or {@link Gin#processOnce} and passed down from
   * parent to child resource.
   */
  loadedFromRoot?: string;

  /**
   * The location where the object was emitted from, such as a Gin module or a resource adapter. This is
   * automatically set when the object is passed to {@link Gin#emit}.
   */
  emittedFrom?: string;

  /**
   * The location where the original object up in the resource hierarchy was loaded from. This is set automatically
   * when the object is passed to {@link Gin#emit} or {@link Gin#processOnce} and passed down from parent to child
   * resource.
   */
  emittedFromRoot?: string;

  /**
   * The unique identifiers of all resources that were produced by the resource in a {@link ResourceAdapter}.
   * This field is set automatically when the resource is processed by {@link Gin#processOnce} or {@link Gin#emit}.
   * When this field is set (and not `undefined`), it indicates that the resource was processed by a resource
   * adapter.
   */
  children?: ResourceLocator[];

  /**
   * If specified, this object was generated by a {@link ResourceAdapter} to produce it and the field points to the
   * resource that it was produced from. Adapters don't need to set this field manually, {@link Gin#emit} will handle
   * it.
   */
  parent?: ResourceLocator;

  /**
   * Notes emitted during the processing of the resource.
   */
  notes?: {
    kind: "Info" | "Warning" | "Error";
    message: string;
  }[];

  /**
   * A list of records for when the resource was actively processed by a resource adapter or listener. Gin will
   * automatically add a record for resources that are processed by adapters, but listeners need to add their own
   * entry.
   */
  history?: {
    origin: string;
    message: string;
  }[];
}

export interface ObjectMeta {
  name: string;
  namespace?: string;
  labels?: Record<string, string>;
  annotations?: Record<string, string>;
  uid?: string;
  resourceVersion?: string;
  creationTimestamp?: string;
  deletionTimestamp?: string;
  finalizers?: string[];
  ownerReferences?: OwnerReference[];
}

export interface OwnerReference {
  apiVersion: string;
  kind: string;
  name: string;
  uid: string;
  controller?: boolean;
  blockOwnerDeletion?: boolean;
}
